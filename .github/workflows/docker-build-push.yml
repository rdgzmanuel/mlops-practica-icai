name: CI/CD Pipeline - Build, Test & Deploy

on:
  push:
    branches:
      - main
      - develop
      - master
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_USERNAME: manuelrdgz
  API_IMAGE: manuelrdgz/mlops-api
  WEB_IMAGE: manuelrdgz/mlops-web

jobs:
  # Job 1: Tests
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        run: |
          # Si tienes tests, se ejecutarÃ¡n aquÃ­
          # pytest tests/ --cov=.
          echo "âœ… Tests passed (add your tests later)"

  # Job 2: Build y Push (solo si los tests pasan)
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Metadata para versionado
      - name: Docker meta - API
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.API_IMAGE }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Docker meta - Web
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.WEB_IMAGE }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      # Build y Push con cache
      - name: Build and push API
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=registry,ref=${{ env.API_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.API_IMAGE }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push Web
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.web
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=registry,ref=${{ env.WEB_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.WEB_IMAGE }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64

      # NotificaciÃ³n
      - name: Summary
        run: |
          echo "## ðŸš€ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… **API Image**: \`${{ env.API_IMAGE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "âœ… **Web Image**: \`${{ env.WEB_IMAGE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags created**:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta-api.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Job 3: Despliegue (opcional - solo para producciÃ³n)
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production..."
          # AquÃ­ irÃ­an tus comandos de despliegue
          # Por ejemplo: ssh, kubectl, docker-compose pull, etc.
          echo "âœ… Deployment completed"